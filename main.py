import logging
from decouple import config
from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, CallbackQuery, ContentType
from keyboards import kb
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext



TOKEN = config('BOT_TOKEN')
ADMIN_ID = config('ADMIN_ID')


logging.basicConfig(level=getattr(logging, config('MODE'), logging.DEBUG))


class Form(StatesGroup):
    image = State()
    name = State()
    phone_number = State()
    email = State()
    stack = State()
    tg = State()


storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'], state='*')
async def start(message: Message, state: FSMContext):
    await bot.send_message(
        message.chat.id, 
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name}!', 
        reply_markup=kb.get_keyboard()
        )
    await bot.send_message(
        message.chat.id, text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å', 
        reply_markup=kb.send_check_button())
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'faq')
async def action_on_query_data(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    await bot.send_message(
            chat_id, 
            '–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å', 
            reply_markup=kb.get_faq_keyboard()
            )


@dp.message_handler(lambda message: message.text == 'üíµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫')
async def action_on_send_check(message: Message):
    chat_id = message.chat.id
    if message.from_user.username:
        await bot.send_message(
            chat_id, 
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞')
    await Form.image.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'send_check')
async def action_on_send_check(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    if callback_query.from_user.username:
        await bot.send_message(
            chat_id, 
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞',
            reply_markup=kb.cancel_button()
            )
    await Form.image.set()


@dp.message_handler(lambda message: message.text == '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏',state='*')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', ignore_case=True), state='*')
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=kb.get_keyboard())

    
@dp.message_handler(content_types=ContentType.PHOTO, state=Form.image)
async def process_image(message: Message, state: FSMContext):
    """
    Process user image
    """
    print(message)
    async with state.proxy() as data:
        data['image'] = message.photo[0].file_id

    await Form.next()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")


@dp.message_handler(content_types=ContentType.TEXT, state=Form.name)
async def process_name(message: Message, state: FSMContext):
    """
    Process user name
    """
    async with state.proxy() as data:
        data['name'] = message.text

    await Form.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message_handler(content_types=ContentType.TEXT, state=Form.phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    """
    Process user phone_number
    """
    async with state.proxy() as data:
        data['phone_number'] = message.text

    await Form.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É")


@dp.message_handler(content_types=ContentType.TEXT, state=Form.email)
async def process_email(message: Message, state: FSMContext):
    """
    Process user email
    """
    async with state.proxy() as data:
        data['email'] = message.text

    await Form.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Å—Ç—ç–∫ (–Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ)")


@dp.message_handler(content_types=ContentType.TEXT, state=Form.stack)
async def process_stack(message: Message, state: FSMContext):
    """
    Process user stack
    """
    async with state.proxy() as data:
        data['stack'] = message.text
    if message.from_user.username:
        await state.finish()
        await message.reply("–°–ø–∞—Å–∏–±–æ! –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –í–∞—Å –≤ –≥—Ä—É–ø–ø—É", reply_markup=kb.get_faq_keyboard())
        await bot.send_photo(
                ADMIN_ID, 
                photo=data['image'], 
                caption=f"{data['name']}\n{data['phone_number']}\n{data['stack']}\n{data['email']}\n@{message.from_user.username}"
                )
    else:
        await Form.next()
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Telegram (@myusername)")


@dp.message_handler(content_types=ContentType.TEXT, state=Form.tg)
async def process_tg_username(message: Message, state: FSMContext):
    """
    Process user username
    """
    async with state.proxy() as data:
        data['username'] = message.text

    await state.finish()
    await message.reply("–°–ø–∞—Å–∏–±–æ! –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –í–∞—Å –≤ –≥—Ä—É–ø–ø—É", reply_markup=kb.get_faq_keyboard())
    await bot.send_photo(
            ADMIN_ID, 
            photo=data['image'], 
            caption=f"{data['name']}\n{data['stack']}\n{data['email']}\n@{message.from_user.username}\n{data['username']}"
            )




@dp.callback_query_handler(lambda callback_query: callback_query.data=='how_to_start')
async def how_to_start(cq: CallbackQuery):
    msg = """
1Ô∏è‚É£–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É 2490 —Å–æ–º–æ–≤; –Ω–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: 
–ú–±–∞–Ω–∫ 0703666656
–≠–ª—Å–æ–º 0501619690
Optima (–¥–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç): 4169 5853 5847 4186

2Ô∏è‚É£–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫ —Å—é–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

–ù–∞—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ–±–∞–≤—è—Ç –≤–∞—Å –≤ –≥—Ä—É–ø–ø—É. 

‚ÄºÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ 
 1. –ù–µ –Ω–∞–¥–æ –∂–¥–∞—Ç—å –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞, —É –Ω–∞—Å –Ω–µ—Ç –ø–æ—Ç–æ–∫–æ–≤ –∏–ª–∏ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –≥—Ä—É–ø–ø.
 2. –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.
    """
    await bot.send_message(cq.message.chat.id, msg, reply_markup=kb.get_faq_keyboard())


@dp.callback_query_handler(lambda callback_query: callback_query.data=='about_program')
async def about_program(cq: CallbackQuery):
    msg = """
1Ô∏è‚É£–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –í—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ª–æ–∂–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏—è–º–∏. –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –æ–ø—ã—Ç–Ω—ã–º–∏ middle —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.‚úÖ

2Ô∏è‚É£–í—ã –±—É–¥–µ—Ç–µ –Ω–µ –æ–¥–Ω–∏, –≤–∞—Å –∂–¥–µ—Ç –Ω–∞—à–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –ù–∞—Å —É–∂–µ –±–æ–ª–µ–µ 60 junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

3Ô∏è‚É£–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö —Å –æ–ø—ã—Ç–Ω—ã–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, –≤ –ø–∞—Ä–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö, –æ–±—Å—É–∂–¥–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —É—á–∏—Ç–µ—Å—å –¥—Ä—É–≥ —É –¥—Ä—É–≥–∞. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —É –≤–∞—Å –±—É–¥–µ—Ç —É –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å.

4Ô∏è‚É£–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–Ω–ª–∞–π–Ω.
 
5Ô∏è‚É£–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –¥–æ –≤–∞—à–µ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∏ –¥–∞–∂–µ –ø–æ—Å–ª–µ. 
    """
    await bot.send_message(cq.message.chat.id, msg, reply_markup=kb.get_faq_keyboard())


@dp.callback_query_handler(lambda callback_query: callback_query.data=='when')
async def date_handler(cq: CallbackQuery):
    msg = """
–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. 

‚ÄºÔ∏è–£ –Ω–∞—Å –Ω–µ—Ç –ø–æ–Ω—è—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ù–µ—Ç –ø–æ—Ç–æ–∫–æ–≤. 

‚úÖ–ñ–µ–ª–∞—é—â–∏–µ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ.
    """
    await bot.send_message(cq.message.chat.id, msg, reply_markup=kb.get_faq_keyboard())


@dp.callback_query_handler(lambda callback_query: callback_query.data=='price')
async def price_handler(cq: CallbackQuery):
    msg = """
–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è $30 –∏–ª–∏ 2490 —Å–æ–º–æ–≤. 

‚úÖ–≠—Ç–æ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂, –¥—Ä—É–≥–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–ª–∞—Ç –Ω–µ—Ç.
‚úÖ–¢–∞–∫–∂–µ, –Ω–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–ª–∞—Ç—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É.
    """
    await bot.send_message(cq.message.chat.id, msg, reply_markup=kb.get_faq_keyboard())




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)